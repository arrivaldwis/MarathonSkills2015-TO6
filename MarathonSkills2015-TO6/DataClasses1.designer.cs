#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarathonSkills2015_TO6
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db_marathonskills2015_7")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCharity(Charity instance);
    partial void UpdateCharity(Charity instance);
    partial void DeleteCharity(Charity instance);
    partial void InsertVolunteer(Volunteer instance);
    partial void UpdateVolunteer(Volunteer instance);
    partial void DeleteVolunteer(Volunteer instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertMarathon(Marathon instance);
    partial void UpdateMarathon(Marathon instance);
    partial void DeleteMarathon(Marathon instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertRaceKitOption(RaceKitOption instance);
    partial void UpdateRaceKitOption(RaceKitOption instance);
    partial void DeleteRaceKitOption(RaceKitOption instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertRegistrationEvent(RegistrationEvent instance);
    partial void UpdateRegistrationEvent(RegistrationEvent instance);
    partial void DeleteRegistrationEvent(RegistrationEvent instance);
    partial void InsertRegistrationStatus(RegistrationStatus instance);
    partial void UpdateRegistrationStatus(RegistrationStatus instance);
    partial void DeleteRegistrationStatus(RegistrationStatus instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRunner(Runner instance);
    partial void UpdateRunner(Runner instance);
    partial void DeleteRunner(Runner instance);
    partial void InsertSponsorship(Sponsorship instance);
    partial void UpdateSponsorship(Sponsorship instance);
    partial void DeleteSponsorship(Sponsorship instance);
    partial void InsertTimesheet(Timesheet instance);
    partial void UpdateTimesheet(Timesheet instance);
    partial void DeleteTimesheet(Timesheet instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::MarathonSkills2015_TO6.Properties.Settings.Default.db_marathonskills2015_7ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Charity> Charities
		{
			get
			{
				return this.GetTable<Charity>();
			}
		}
		
		public System.Data.Linq.Table<Volunteer> Volunteers
		{
			get
			{
				return this.GetTable<Volunteer>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Distance> Distances
		{
			get
			{
				return this.GetTable<Distance>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<InteractiveMap> InteractiveMaps
		{
			get
			{
				return this.GetTable<InteractiveMap>();
			}
		}
		
		public System.Data.Linq.Table<Marathon> Marathons
		{
			get
			{
				return this.GetTable<Marathon>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<PositionAdd> PositionAdds
		{
			get
			{
				return this.GetTable<PositionAdd>();
			}
		}
		
		public System.Data.Linq.Table<RaceKitOption> RaceKitOptions
		{
			get
			{
				return this.GetTable<RaceKitOption>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<RegistrationEvent> RegistrationEvents
		{
			get
			{
				return this.GetTable<RegistrationEvent>();
			}
		}
		
		public System.Data.Linq.Table<RegistrationStatus> RegistrationStatus
		{
			get
			{
				return this.GetTable<RegistrationStatus>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Runner> Runners
		{
			get
			{
				return this.GetTable<Runner>();
			}
		}
		
		public System.Data.Linq.Table<Speed> Speeds
		{
			get
			{
				return this.GetTable<Speed>();
			}
		}
		
		public System.Data.Linq.Table<Sponsorship> Sponsorships
		{
			get
			{
				return this.GetTable<Sponsorship>();
			}
		}
		
		public System.Data.Linq.Table<Timesheet> Timesheets
		{
			get
			{
				return this.GetTable<Timesheet>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Charity")]
	public partial class Charity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharityId;
		
		private string _CharityName;
		
		private string _CharityDescription;
		
		private string _CharityLogo;
		
		private EntitySet<Registration> _Registrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharityIdChanging(int value);
    partial void OnCharityIdChanged();
    partial void OnCharityNameChanging(string value);
    partial void OnCharityNameChanged();
    partial void OnCharityDescriptionChanging(string value);
    partial void OnCharityDescriptionChanged();
    partial void OnCharityLogoChanging(string value);
    partial void OnCharityLogoChanged();
    #endregion
		
		public Charity()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CharityId
		{
			get
			{
				return this._CharityId;
			}
			set
			{
				if ((this._CharityId != value))
				{
					this.OnCharityIdChanging(value);
					this.SendPropertyChanging();
					this._CharityId = value;
					this.SendPropertyChanged("CharityId");
					this.OnCharityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CharityName
		{
			get
			{
				return this._CharityName;
			}
			set
			{
				if ((this._CharityName != value))
				{
					this.OnCharityNameChanging(value);
					this.SendPropertyChanging();
					this._CharityName = value;
					this.SendPropertyChanged("CharityName");
					this.OnCharityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityDescription", DbType="NVarChar(2000)")]
		public string CharityDescription
		{
			get
			{
				return this._CharityDescription;
			}
			set
			{
				if ((this._CharityDescription != value))
				{
					this.OnCharityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CharityDescription = value;
					this.SendPropertyChanged("CharityDescription");
					this.OnCharityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityLogo", DbType="NVarChar(50)")]
		public string CharityLogo
		{
			get
			{
				return this._CharityLogo;
			}
			set
			{
				if ((this._CharityLogo != value))
				{
					this.OnCharityLogoChanging(value);
					this.SendPropertyChanging();
					this._CharityLogo = value;
					this.SendPropertyChanged("CharityLogo");
					this.OnCharityLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Charity_Registration", Storage="_Registrations", ThisKey="CharityId", OtherKey="CharityId")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Charity = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Charity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Volunteer")]
	public partial class Volunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VolunteerId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _CountryCode;
		
		private string _Gender;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Gender> _Gender1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolunteerIdChanging(int value);
    partial void OnVolunteerIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public Volunteer()
		{
			this._Country = default(EntityRef<Country>);
			this._Gender1 = default(EntityRef<Gender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(80)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(80)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					if (this._Gender1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Volunteer", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Volunteers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Volunteers.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Volunteer", Storage="_Gender1", ThisKey="Gender", OtherKey="Gender1", IsForeignKey=true)]
		public Gender Gender1
		{
			get
			{
				return this._Gender1.Entity;
			}
			set
			{
				Gender previousValue = this._Gender1.Entity;
				if (((previousValue != value) 
							|| (this._Gender1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender1.Entity = null;
						previousValue.Volunteers.Remove(this);
					}
					this._Gender1.Entity = value;
					if ((value != null))
					{
						value.Volunteers.Add(this);
						this._Gender = value.Gender1;
					}
					else
					{
						this._Gender = default(string);
					}
					this.SendPropertyChanged("Gender1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _CountryName;
		
		private string _CountryFlag;
		
		private EntitySet<Volunteer> _Volunteers;
		
		private EntitySet<Marathon> _Marathons;
		
		private EntitySet<Runner> _Runners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnCountryFlagChanging(string value);
    partial void OnCountryFlagChanged();
    #endregion
		
		public Country()
		{
			this._Volunteers = new EntitySet<Volunteer>(new Action<Volunteer>(this.attach_Volunteers), new Action<Volunteer>(this.detach_Volunteers));
			this._Marathons = new EntitySet<Marathon>(new Action<Marathon>(this.attach_Marathons), new Action<Marathon>(this.detach_Marathons));
			this._Runners = new EntitySet<Runner>(new Action<Runner>(this.attach_Runners), new Action<Runner>(this.detach_Runners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryFlag", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryFlag
		{
			get
			{
				return this._CountryFlag;
			}
			set
			{
				if ((this._CountryFlag != value))
				{
					this.OnCountryFlagChanging(value);
					this.SendPropertyChanging();
					this._CountryFlag = value;
					this.SendPropertyChanged("CountryFlag");
					this.OnCountryFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Volunteer", Storage="_Volunteers", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<Volunteer> Volunteers
		{
			get
			{
				return this._Volunteers;
			}
			set
			{
				this._Volunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Marathon", Storage="_Marathons", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<Marathon> Marathons
		{
			get
			{
				return this._Marathons;
			}
			set
			{
				this._Marathons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Runner", Storage="_Runners", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<Runner> Runners
		{
			get
			{
				return this._Runners;
			}
			set
			{
				this._Runners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Volunteers(Volunteer entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Volunteers(Volunteer entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Marathons(Marathon entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Marathons(Marathon entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Distance")]
	public partial class Distance
	{
		
		private string _Name;
		
		private string _Image;
		
		private string _Length;
		
		public Distance()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="NVarChar(255)")]
		public string Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private string _EventName;
		
		private string _EventTypeId;
		
		private byte _MarathonId;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<short> _MaxParticipants;
		
		private EntitySet<RegistrationEvent> _RegistrationEvents;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<Marathon> _Marathon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventTypeIdChanging(string value);
    partial void OnEventTypeIdChanged();
    partial void OnMarathonIdChanging(byte value);
    partial void OnMarathonIdChanged();
    partial void OnStartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateTimeChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnMaxParticipantsChanging(System.Nullable<short> value);
    partial void OnMaxParticipantsChanged();
    #endregion
		
		public Event()
		{
			this._RegistrationEvents = new EntitySet<RegistrationEvent>(new Action<RegistrationEvent>(this.attach_RegistrationEvents), new Action<RegistrationEvent>(this.detach_RegistrationEvents));
			this._EventType = default(EntityRef<EventType>);
			this._Marathon = default(EntityRef<Marathon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="NChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarathonId", DbType="TinyInt NOT NULL")]
		public byte MarathonId
		{
			get
			{
				return this._MarathonId;
			}
			set
			{
				if ((this._MarathonId != value))
				{
					if (this._Marathon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarathonIdChanging(value);
					this.SendPropertyChanging();
					this._MarathonId = value;
					this.SendPropertyChanged("MarathonId");
					this.OnMarathonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxParticipants", DbType="SmallInt")]
		public System.Nullable<short> MaxParticipants
		{
			get
			{
				return this._MaxParticipants;
			}
			set
			{
				if ((this._MaxParticipants != value))
				{
					this.OnMaxParticipantsChanging(value);
					this.SendPropertyChanging();
					this._MaxParticipants = value;
					this.SendPropertyChanged("MaxParticipants");
					this.OnMaxParticipantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_RegistrationEvent", Storage="_RegistrationEvents", ThisKey="EventId", OtherKey="EventId")]
		public EntitySet<RegistrationEvent> RegistrationEvents
		{
			get
			{
				return this._RegistrationEvents;
			}
			set
			{
				this._RegistrationEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="EventTypeId", OtherKey="EventTypeId", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EventTypeId = value.EventTypeId;
					}
					else
					{
						this._EventTypeId = default(string);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marathon_Event", Storage="_Marathon", ThisKey="MarathonId", OtherKey="MarathonId", IsForeignKey=true)]
		public Marathon Marathon
		{
			get
			{
				return this._Marathon.Entity;
			}
			set
			{
				Marathon previousValue = this._Marathon.Entity;
				if (((previousValue != value) 
							|| (this._Marathon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marathon.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Marathon.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._MarathonId = value.MarathonId;
					}
					else
					{
						this._MarathonId = default(byte);
					}
					this.SendPropertyChanged("Marathon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegistrationEvents(RegistrationEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_RegistrationEvents(RegistrationEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventTypeId;
		
		private string _EventTypeName;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIdChanging(string value);
    partial void OnEventTypeIdChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this.OnEventTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EventTypeName = value;
					this.SendPropertyChanged("EventTypeName");
					this.OnEventTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="EventTypeId", OtherKey="EventTypeId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Gender1;
		
		private EntitySet<Volunteer> _Volunteers;
		
		private EntitySet<Runner> _Runners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGender1Changing(string value);
    partial void OnGender1Changed();
    #endregion
		
		public Gender()
		{
			this._Volunteers = new EntitySet<Volunteer>(new Action<Volunteer>(this.attach_Volunteers), new Action<Volunteer>(this.detach_Volunteers));
			this._Runners = new EntitySet<Runner>(new Action<Runner>(this.attach_Runners), new Action<Runner>(this.detach_Runners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Gender", Storage="_Gender1", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Gender1
		{
			get
			{
				return this._Gender1;
			}
			set
			{
				if ((this._Gender1 != value))
				{
					this.OnGender1Changing(value);
					this.SendPropertyChanging();
					this._Gender1 = value;
					this.SendPropertyChanged("Gender1");
					this.OnGender1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Volunteer", Storage="_Volunteers", ThisKey="Gender1", OtherKey="Gender")]
		public EntitySet<Volunteer> Volunteers
		{
			get
			{
				return this._Volunteers;
			}
			set
			{
				this._Volunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Runner", Storage="_Runners", ThisKey="Gender1", OtherKey="Gender")]
		public EntitySet<Runner> Runners
		{
			get
			{
				return this._Runners;
			}
			set
			{
				this._Runners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Volunteers(Volunteer entity)
		{
			this.SendPropertyChanging();
			entity.Gender1 = this;
		}
		
		private void detach_Volunteers(Volunteer entity)
		{
			this.SendPropertyChanging();
			entity.Gender1 = null;
		}
		
		private void attach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.Gender1 = this;
		}
		
		private void detach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.Gender1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractiveMap")]
	public partial class InteractiveMap
	{
		
		private string _Checkpoint;
		
		private string _Landmark;
		
		private string _Facility;
		
		public InteractiveMap()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Checkpoint]", Storage="_Checkpoint", DbType="NVarChar(255)")]
		public string Checkpoint
		{
			get
			{
				return this._Checkpoint;
			}
			set
			{
				if ((this._Checkpoint != value))
				{
					this._Checkpoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Landmark", DbType="NVarChar(255)")]
		public string Landmark
		{
			get
			{
				return this._Landmark;
			}
			set
			{
				if ((this._Landmark != value))
				{
					this._Landmark = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facility", DbType="NVarChar(255)")]
		public string Facility
		{
			get
			{
				return this._Facility;
			}
			set
			{
				if ((this._Facility != value))
				{
					this._Facility = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marathon")]
	public partial class Marathon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _MarathonId;
		
		private string _MarathonName;
		
		private string _CityName;
		
		private string _CountryCode;
		
		private System.Nullable<short> _YearHeld;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarathonIdChanging(byte value);
    partial void OnMarathonIdChanged();
    partial void OnMarathonNameChanging(string value);
    partial void OnMarathonNameChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnYearHeldChanging(System.Nullable<short> value);
    partial void OnYearHeldChanged();
    #endregion
		
		public Marathon()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarathonId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte MarathonId
		{
			get
			{
				return this._MarathonId;
			}
			set
			{
				if ((this._MarathonId != value))
				{
					this.OnMarathonIdChanging(value);
					this.SendPropertyChanging();
					this._MarathonId = value;
					this.SendPropertyChanged("MarathonId");
					this.OnMarathonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarathonName", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string MarathonName
		{
			get
			{
				return this._MarathonName;
			}
			set
			{
				if ((this._MarathonName != value))
				{
					this.OnMarathonNameChanging(value);
					this.SendPropertyChanging();
					this._MarathonName = value;
					this.SendPropertyChanged("MarathonName");
					this.OnMarathonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(80)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearHeld", DbType="SmallInt")]
		public System.Nullable<short> YearHeld
		{
			get
			{
				return this._YearHeld;
			}
			set
			{
				if ((this._YearHeld != value))
				{
					this.OnYearHeldChanging(value);
					this.SendPropertyChanging();
					this._YearHeld = value;
					this.SendPropertyChanged("YearHeld");
					this.OnYearHeldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marathon_Event", Storage="_Events", ThisKey="MarathonId", OtherKey="MarathonId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Marathon", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Marathons.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Marathons.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Marathon = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Marathon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PositionId;
		
		private string _PositionName;
		
		private string _PositionDescription;
		
		private string _PayPeriod;
		
		private decimal _Payrate;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIdChanging(short value);
    partial void OnPositionIdChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnPositionDescriptionChanging(string value);
    partial void OnPositionDescriptionChanged();
    partial void OnPayPeriodChanging(string value);
    partial void OnPayPeriodChanged();
    partial void OnPayrateChanging(decimal value);
    partial void OnPayrateChanged();
    #endregion
		
		public Position()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionDescription", DbType="VarChar(1000)")]
		public string PositionDescription
		{
			get
			{
				return this._PositionDescription;
			}
			set
			{
				if ((this._PositionDescription != value))
				{
					this.OnPositionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PositionDescription = value;
					this.SendPropertyChanged("PositionDescription");
					this.OnPositionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPeriod", DbType="VarChar(1000)")]
		public string PayPeriod
		{
			get
			{
				return this._PayPeriod;
			}
			set
			{
				if ((this._PayPeriod != value))
				{
					this.OnPayPeriodChanging(value);
					this.SendPropertyChanging();
					this._PayPeriod = value;
					this.SendPropertyChanged("PayPeriod");
					this.OnPayPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payrate", DbType="Decimal(10,2) NOT NULL")]
		public decimal Payrate
		{
			get
			{
				return this._Payrate;
			}
			set
			{
				if ((this._Payrate != value))
				{
					this.OnPayrateChanging(value);
					this.SendPropertyChanging();
					this._Payrate = value;
					this.SendPropertyChanged("Payrate");
					this.OnPayrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Staffs", ThisKey="PositionId", OtherKey="PositionId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionAdd")]
	public partial class PositionAdd
	{
		
		private string _PositionId;
		
		private string _PositionName;
		
		private string _PositionDescription;
		
		private string _PayPeriod;
		
		private System.Nullable<decimal> _PayRate;
		
		public PositionAdd()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="NChar(10)")]
		public string PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					this._PositionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(255)")]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this._PositionName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionDescription", DbType="NVarChar(255)")]
		public string PositionDescription
		{
			get
			{
				return this._PositionDescription;
			}
			set
			{
				if ((this._PositionDescription != value))
				{
					this._PositionDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPeriod", DbType="NVarChar(255)")]
		public string PayPeriod
		{
			get
			{
				return this._PayPeriod;
			}
			set
			{
				if ((this._PayPeriod != value))
				{
					this._PayPeriod = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayRate", DbType="Money")]
		public System.Nullable<decimal> PayRate
		{
			get
			{
				return this._PayRate;
			}
			set
			{
				if ((this._PayRate != value))
				{
					this._PayRate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RaceKitOption")]
	public partial class RaceKitOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _RaceKitOptionId;
		
		private string _RaceKitOption1;
		
		private decimal _Cost;
		
		private EntitySet<Registration> _Registrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceKitOptionIdChanging(char value);
    partial void OnRaceKitOptionIdChanged();
    partial void OnRaceKitOption1Changing(string value);
    partial void OnRaceKitOption1Changed();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    #endregion
		
		public RaceKitOption()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceKitOptionId", DbType="NChar(1) NOT NULL", IsPrimaryKey=true)]
		public char RaceKitOptionId
		{
			get
			{
				return this._RaceKitOptionId;
			}
			set
			{
				if ((this._RaceKitOptionId != value))
				{
					this.OnRaceKitOptionIdChanging(value);
					this.SendPropertyChanging();
					this._RaceKitOptionId = value;
					this.SendPropertyChanged("RaceKitOptionId");
					this.OnRaceKitOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RaceKitOption", Storage="_RaceKitOption1", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string RaceKitOption1
		{
			get
			{
				return this._RaceKitOption1;
			}
			set
			{
				if ((this._RaceKitOption1 != value))
				{
					this.OnRaceKitOption1Changing(value);
					this.SendPropertyChanging();
					this._RaceKitOption1 = value;
					this.SendPropertyChanged("RaceKitOption1");
					this.OnRaceKitOption1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceKitOption_Registration", Storage="_Registrations", ThisKey="RaceKitOptionId", OtherKey="RaceKitOptionId")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.RaceKitOption = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.RaceKitOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registration")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationId;
		
		private int _RunnerId;
		
		private System.DateTime _RegistrationDateTime;
		
		private char _RaceKitOptionId;
		
		private byte _RegistrationStatusId;
		
		private decimal _Cost;
		
		private int _CharityId;
		
		private decimal _SponsorshipTarget;
		
		private EntitySet<RegistrationEvent> _RegistrationEvents;
		
		private EntitySet<Sponsorship> _Sponsorships;
		
		private EntityRef<Charity> _Charity;
		
		private EntityRef<RaceKitOption> _RaceKitOption;
		
		private EntityRef<RegistrationStatus> _RegistrationStatus;
		
		private EntityRef<Runner> _Runner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIdChanging(int value);
    partial void OnRegistrationIdChanged();
    partial void OnRunnerIdChanging(int value);
    partial void OnRunnerIdChanged();
    partial void OnRegistrationDateTimeChanging(System.DateTime value);
    partial void OnRegistrationDateTimeChanged();
    partial void OnRaceKitOptionIdChanging(char value);
    partial void OnRaceKitOptionIdChanged();
    partial void OnRegistrationStatusIdChanging(byte value);
    partial void OnRegistrationStatusIdChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnCharityIdChanging(int value);
    partial void OnCharityIdChanged();
    partial void OnSponsorshipTargetChanging(decimal value);
    partial void OnSponsorshipTargetChanged();
    #endregion
		
		public Registration()
		{
			this._RegistrationEvents = new EntitySet<RegistrationEvent>(new Action<RegistrationEvent>(this.attach_RegistrationEvents), new Action<RegistrationEvent>(this.detach_RegistrationEvents));
			this._Sponsorships = new EntitySet<Sponsorship>(new Action<Sponsorship>(this.attach_Sponsorships), new Action<Sponsorship>(this.detach_Sponsorships));
			this._Charity = default(EntityRef<Charity>);
			this._RaceKitOption = default(EntityRef<RaceKitOption>);
			this._RegistrationStatus = default(EntityRef<RegistrationStatus>);
			this._Runner = default(EntityRef<Runner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationId
		{
			get
			{
				return this._RegistrationId;
			}
			set
			{
				if ((this._RegistrationId != value))
				{
					this.OnRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationId = value;
					this.SendPropertyChanged("RegistrationId");
					this.OnRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunnerId", DbType="Int NOT NULL")]
		public int RunnerId
		{
			get
			{
				return this._RunnerId;
			}
			set
			{
				if ((this._RunnerId != value))
				{
					if (this._Runner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRunnerIdChanging(value);
					this.SendPropertyChanging();
					this._RunnerId = value;
					this.SendPropertyChanged("RunnerId");
					this.OnRunnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDateTime
		{
			get
			{
				return this._RegistrationDateTime;
			}
			set
			{
				if ((this._RegistrationDateTime != value))
				{
					this.OnRegistrationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDateTime = value;
					this.SendPropertyChanged("RegistrationDateTime");
					this.OnRegistrationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceKitOptionId", DbType="NChar(1) NOT NULL")]
		public char RaceKitOptionId
		{
			get
			{
				return this._RaceKitOptionId;
			}
			set
			{
				if ((this._RaceKitOptionId != value))
				{
					if (this._RaceKitOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceKitOptionIdChanging(value);
					this.SendPropertyChanging();
					this._RaceKitOptionId = value;
					this.SendPropertyChanged("RaceKitOptionId");
					this.OnRaceKitOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationStatusId", DbType="TinyInt NOT NULL")]
		public byte RegistrationStatusId
		{
			get
			{
				return this._RegistrationStatusId;
			}
			set
			{
				if ((this._RegistrationStatusId != value))
				{
					if (this._RegistrationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationStatusId = value;
					this.SendPropertyChanged("RegistrationStatusId");
					this.OnRegistrationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(10,2) NOT NULL")]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharityId", DbType="Int NOT NULL")]
		public int CharityId
		{
			get
			{
				return this._CharityId;
			}
			set
			{
				if ((this._CharityId != value))
				{
					if (this._Charity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharityIdChanging(value);
					this.SendPropertyChanging();
					this._CharityId = value;
					this.SendPropertyChanged("CharityId");
					this.OnCharityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorshipTarget", DbType="Decimal(10,2) NOT NULL")]
		public decimal SponsorshipTarget
		{
			get
			{
				return this._SponsorshipTarget;
			}
			set
			{
				if ((this._SponsorshipTarget != value))
				{
					this.OnSponsorshipTargetChanging(value);
					this.SendPropertyChanging();
					this._SponsorshipTarget = value;
					this.SendPropertyChanged("SponsorshipTarget");
					this.OnSponsorshipTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_RegistrationEvent", Storage="_RegistrationEvents", ThisKey="RegistrationId", OtherKey="RegistrationId")]
		public EntitySet<RegistrationEvent> RegistrationEvents
		{
			get
			{
				return this._RegistrationEvents;
			}
			set
			{
				this._RegistrationEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Sponsorship", Storage="_Sponsorships", ThisKey="RegistrationId", OtherKey="RegistrationId")]
		public EntitySet<Sponsorship> Sponsorships
		{
			get
			{
				return this._Sponsorships;
			}
			set
			{
				this._Sponsorships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Charity_Registration", Storage="_Charity", ThisKey="CharityId", OtherKey="CharityId", IsForeignKey=true)]
		public Charity Charity
		{
			get
			{
				return this._Charity.Entity;
			}
			set
			{
				Charity previousValue = this._Charity.Entity;
				if (((previousValue != value) 
							|| (this._Charity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Charity.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Charity.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._CharityId = value.CharityId;
					}
					else
					{
						this._CharityId = default(int);
					}
					this.SendPropertyChanged("Charity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RaceKitOption_Registration", Storage="_RaceKitOption", ThisKey="RaceKitOptionId", OtherKey="RaceKitOptionId", IsForeignKey=true)]
		public RaceKitOption RaceKitOption
		{
			get
			{
				return this._RaceKitOption.Entity;
			}
			set
			{
				RaceKitOption previousValue = this._RaceKitOption.Entity;
				if (((previousValue != value) 
							|| (this._RaceKitOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RaceKitOption.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._RaceKitOption.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._RaceKitOptionId = value.RaceKitOptionId;
					}
					else
					{
						this._RaceKitOptionId = default(char);
					}
					this.SendPropertyChanged("RaceKitOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegistrationStatus_Registration", Storage="_RegistrationStatus", ThisKey="RegistrationStatusId", OtherKey="RegistrationStatusId", IsForeignKey=true)]
		public RegistrationStatus RegistrationStatus
		{
			get
			{
				return this._RegistrationStatus.Entity;
			}
			set
			{
				RegistrationStatus previousValue = this._RegistrationStatus.Entity;
				if (((previousValue != value) 
							|| (this._RegistrationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegistrationStatus.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._RegistrationStatus.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._RegistrationStatusId = value.RegistrationStatusId;
					}
					else
					{
						this._RegistrationStatusId = default(byte);
					}
					this.SendPropertyChanged("RegistrationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Runner_Registration", Storage="_Runner", ThisKey="RunnerId", OtherKey="RunnerId", IsForeignKey=true)]
		public Runner Runner
		{
			get
			{
				return this._Runner.Entity;
			}
			set
			{
				Runner previousValue = this._Runner.Entity;
				if (((previousValue != value) 
							|| (this._Runner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Runner.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Runner.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._RunnerId = value.RunnerId;
					}
					else
					{
						this._RunnerId = default(int);
					}
					this.SendPropertyChanged("Runner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegistrationEvents(RegistrationEvent entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_RegistrationEvents(RegistrationEvent entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
		
		private void attach_Sponsorships(Sponsorship entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Sponsorships(Sponsorship entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegistrationEvent")]
	public partial class RegistrationEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationEventId;
		
		private int _RegistrationId;
		
		private string _EventId;
		
		private System.Nullable<short> _BibNumber;
		
		private System.Nullable<int> _RaceTime;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationEventIdChanging(int value);
    partial void OnRegistrationEventIdChanged();
    partial void OnRegistrationIdChanging(int value);
    partial void OnRegistrationIdChanged();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnBibNumberChanging(System.Nullable<short> value);
    partial void OnBibNumberChanged();
    partial void OnRaceTimeChanging(System.Nullable<int> value);
    partial void OnRaceTimeChanged();
    #endregion
		
		public RegistrationEvent()
		{
			this._Event = default(EntityRef<Event>);
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationEventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationEventId
		{
			get
			{
				return this._RegistrationEventId;
			}
			set
			{
				if ((this._RegistrationEventId != value))
				{
					this.OnRegistrationEventIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationEventId = value;
					this.SendPropertyChanged("RegistrationEventId");
					this.OnRegistrationEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationId", DbType="Int NOT NULL")]
		public int RegistrationId
		{
			get
			{
				return this._RegistrationId;
			}
			set
			{
				if ((this._RegistrationId != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationId = value;
					this.SendPropertyChanged("RegistrationId");
					this.OnRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="NChar(6) NOT NULL", CanBeNull=false)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BibNumber", DbType="SmallInt")]
		public System.Nullable<short> BibNumber
		{
			get
			{
				return this._BibNumber;
			}
			set
			{
				if ((this._BibNumber != value))
				{
					this.OnBibNumberChanging(value);
					this.SendPropertyChanging();
					this._BibNumber = value;
					this.SendPropertyChanged("BibNumber");
					this.OnBibNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceTime", DbType="Int")]
		public System.Nullable<int> RaceTime
		{
			get
			{
				return this._RaceTime;
			}
			set
			{
				if ((this._RaceTime != value))
				{
					this.OnRaceTimeChanging(value);
					this.SendPropertyChanging();
					this._RaceTime = value;
					this.SendPropertyChanged("RaceTime");
					this.OnRaceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_RegistrationEvent", Storage="_Event", ThisKey="EventId", OtherKey="EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.RegistrationEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.RegistrationEvents.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(string);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_RegistrationEvent", Storage="_Registration", ThisKey="RegistrationId", OtherKey="RegistrationId", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.RegistrationEvents.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.RegistrationEvents.Add(this);
						this._RegistrationId = value.RegistrationId;
					}
					else
					{
						this._RegistrationId = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegistrationStatus")]
	public partial class RegistrationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RegistrationStatusId;
		
		private string _RegistrationStatus1;
		
		private EntitySet<Registration> _Registrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationStatusIdChanging(byte value);
    partial void OnRegistrationStatusIdChanged();
    partial void OnRegistrationStatus1Changing(string value);
    partial void OnRegistrationStatus1Changed();
    #endregion
		
		public RegistrationStatus()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationStatusId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte RegistrationStatusId
		{
			get
			{
				return this._RegistrationStatusId;
			}
			set
			{
				if ((this._RegistrationStatusId != value))
				{
					this.OnRegistrationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationStatusId = value;
					this.SendPropertyChanged("RegistrationStatusId");
					this.OnRegistrationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RegistrationStatus", Storage="_RegistrationStatus1", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string RegistrationStatus1
		{
			get
			{
				return this._RegistrationStatus1;
			}
			set
			{
				if ((this._RegistrationStatus1 != value))
				{
					this.OnRegistrationStatus1Changing(value);
					this.SendPropertyChanging();
					this._RegistrationStatus1 = value;
					this.SendPropertyChanged("RegistrationStatus1");
					this.OnRegistrationStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegistrationStatus_Registration", Storage="_Registrations", ThisKey="RegistrationStatusId", OtherKey="RegistrationStatusId")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationStatus = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _RoleId;
		
		private string _RoleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(char value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NChar(1) NOT NULL", IsPrimaryKey=true)]
		public char RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Runner")]
	public partial class Runner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RunnerId;
		
		private string _Email;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _CountryCode;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Gender> _Gender1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRunnerIdChanging(int value);
    partial void OnRunnerIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    #endregion
		
		public Runner()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Country = default(EntityRef<Country>);
			this._Gender1 = default(EntityRef<Gender>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunnerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RunnerId
		{
			get
			{
				return this._RunnerId;
			}
			set
			{
				if ((this._RunnerId != value))
				{
					this.OnRunnerIdChanging(value);
					this.SendPropertyChanging();
					this._RunnerId = value;
					this.SendPropertyChanged("RunnerId");
					this.OnRunnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					if (this._Gender1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Runner_Registration", Storage="_Registrations", ThisKey="RunnerId", OtherKey="RunnerId")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Runner", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Runners.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Runners.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Runner", Storage="_Gender1", ThisKey="Gender", OtherKey="Gender1", IsForeignKey=true)]
		public Gender Gender1
		{
			get
			{
				return this._Gender1.Entity;
			}
			set
			{
				Gender previousValue = this._Gender1.Entity;
				if (((previousValue != value) 
							|| (this._Gender1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender1.Entity = null;
						previousValue.Runners.Remove(this);
					}
					this._Gender1.Entity = value;
					if ((value != null))
					{
						value.Runners.Add(this);
						this._Gender = value.Gender1;
					}
					else
					{
						this._Gender = default(string);
					}
					this.SendPropertyChanged("Gender1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Runner", Storage="_User", ThisKey="Email", OtherKey="Email", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Runners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Runners.Add(this);
						this._Email = value.Email;
					}
					else
					{
						this._Email = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Runner = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Runner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speed")]
	public partial class Speed
	{
		
		private string _Name;
		
		private string _Image;
		
		private string _Speed1;
		
		public Speed()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Speed", Storage="_Speed1", DbType="NVarChar(255)")]
		public string Speed1
		{
			get
			{
				return this._Speed1;
			}
			set
			{
				if ((this._Speed1 != value))
				{
					this._Speed1 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sponsorship")]
	public partial class Sponsorship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SponsorshipId;
		
		private string _SponsorName;
		
		private int _RegistrationId;
		
		private decimal _Amount;
		
		private EntityRef<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSponsorshipIdChanging(int value);
    partial void OnSponsorshipIdChanged();
    partial void OnSponsorNameChanging(string value);
    partial void OnSponsorNameChanged();
    partial void OnRegistrationIdChanging(int value);
    partial void OnRegistrationIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public Sponsorship()
		{
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorshipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SponsorshipId
		{
			get
			{
				return this._SponsorshipId;
			}
			set
			{
				if ((this._SponsorshipId != value))
				{
					this.OnSponsorshipIdChanging(value);
					this.SendPropertyChanging();
					this._SponsorshipId = value;
					this.SendPropertyChanged("SponsorshipId");
					this.OnSponsorshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SponsorName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string SponsorName
		{
			get
			{
				return this._SponsorName;
			}
			set
			{
				if ((this._SponsorName != value))
				{
					this.OnSponsorNameChanging(value);
					this.SendPropertyChanging();
					this._SponsorName = value;
					this.SendPropertyChanged("SponsorName");
					this.OnSponsorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationId", DbType="Int NOT NULL")]
		public int RegistrationId
		{
			get
			{
				return this._RegistrationId;
			}
			set
			{
				if ((this._RegistrationId != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationId = value;
					this.SendPropertyChanged("RegistrationId");
					this.OnRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Sponsorship", Storage="_Registration", ThisKey="RegistrationId", OtherKey="RegistrationId", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Sponsorships.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Sponsorships.Add(this);
						this._RegistrationId = value.RegistrationId;
					}
					else
					{
						this._RegistrationId = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Timesheet")]
	public partial class Timesheet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimesheetId;
		
		private int _StaffId;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<System.DateTime> _EndDateTime;
		
		private System.Nullable<decimal> _PayAmount;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimesheetIdChanging(int value);
    partial void OnTimesheetIdChanged();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnStartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateTimeChanged();
    partial void OnEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeChanged();
    partial void OnPayAmountChanging(System.Nullable<decimal> value);
    partial void OnPayAmountChanged();
    #endregion
		
		public Timesheet()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimesheetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimesheetId
		{
			get
			{
				return this._TimesheetId;
			}
			set
			{
				if ((this._TimesheetId != value))
				{
					this.OnTimesheetIdChanging(value);
					this.SendPropertyChanging();
					this._TimesheetId = value;
					this.SendPropertyChanged("TimesheetId");
					this.OnTimesheetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="Int NOT NULL")]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayAmount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> PayAmount
		{
			get
			{
				return this._PayAmount;
			}
			set
			{
				if ((this._PayAmount != value))
				{
					this.OnPayAmountChanging(value);
					this.SendPropertyChanging();
					this._PayAmount = value;
					this.SendPropertyChanged("PayAmount");
					this.OnPayAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Timesheet", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Timesheets.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Timesheets.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private char _RoleId;
		
		private EntitySet<Runner> _Runners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnRoleIdChanging(char value);
    partial void OnRoleIdChanged();
    #endregion
		
		public User()
		{
			this._Runners = new EntitySet<Runner>(new Action<Runner>(this.attach_Runners), new Action<Runner>(this.detach_Runners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(80)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(80)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NChar(1) NOT NULL")]
		public char RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Runner", Storage="_Runners", ThisKey="Email", OtherKey="Email")]
		public EntitySet<Runner> Runners
		{
			get
			{
				return this._Runners;
			}
			set
			{
				this._Runners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Runners(Runner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.DateTime _DateOfBirth;
		
		private string _Gender;
		
		private short _PositionId;
		
		private string _Comments;
		
		private EntitySet<Timesheet> _Timesheets;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPositionIdChanging(short value);
    partial void OnPositionIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Staff()
		{
			this._Timesheets = new EntitySet<Timesheet>(new Action<Timesheet>(this.attach_Timesheets), new Action<Timesheet>(this.detach_Timesheets));
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="SmallInt NOT NULL")]
		public short PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(2000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Timesheet", Storage="_Timesheets", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<Timesheet> Timesheets
		{
			get
			{
				return this._Timesheets;
			}
			set
			{
				this._Timesheets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Staff", Storage="_Position", ThisKey="PositionId", OtherKey="PositionId", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._PositionId = value.PositionId;
					}
					else
					{
						this._PositionId = default(short);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Timesheets(Timesheet entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Timesheets(Timesheet entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
}
#pragma warning restore 1591
